sudo: false

# build matrices
os:
   - linux
   - osx
   
env:
   - CONDA_PYTHON_VERSION=2.7
   - CONDA_PYTHON_VERSION=3.5
      

before_install:
 # download and install miniconda
 # oops, python 3.5 and boost not ready yet
 - if [[ "$TRAVIS_OS_NAME" == "linux" && "$CONDA_PYTHON_VERSION" == "3.5" ]]; then export CONDA_PYTHON_VERSION="3.4" ; fi
 
 - echo "*************************************************"
 - echo "Building for $TRAVIS_OS_NAME"
 - echo "         for Python $CONDA_PYTHON_VERSION"

 - export PYMAJOR="2";
 - if [[ "$CONDA_PYTHON_VERSION" == "3.5" ]] ; then export PYMAJOR="3"; fi
 - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then wget http://repo.continuum.io/miniconda/Miniconda$PYMAJOR-3.5.5-Linux-x86_64.sh -O miniconda.sh; fi
 - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then wget http://repo.continuum.io/miniconda/Miniconda$PYMAJOR-4.2.12-MacOSX-x86_64.sh -O miniconda.sh; fi 

 - bash miniconda.sh -b -p $HOME/conda
 - export PATH="$HOME/conda/bin:$PATH"
 - hash -r
 - conda config --set always_yes yes --set changeps1 no
 - conda update -q conda
 # Useful for debugging any issues with conda
 - conda info -a

 # create and activate the build/test environment
 - conda create -q -n tenv python=$CONDA_PYTHON_VERSION pip cmake
 - source activate tenv

# additional .debs we need:
addons:
 apt:
  packages:
    - build-essential
    - openjdk-7-jdk
    - swig
    - libjpeg-dev

install:
 - conda install -q numpy pillow pandas # matplotlib

 # install the conda boost packages from the RDKit binstar channel.
 - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then conda install -q -c rdkit boost=1.55.0 ; fi

 # get working boost libs
 - if [[ "$TRAVIS_OS_NAME" == "osx" && "$CONDA_PYTHON_VERSION" == "2.7" ]]; then conda install -c bp-kelley boost=1.62.0 ; fi
 - if [[ "$TRAVIS_OS_NAME" == "osx" && "$CONDA_PYTHON_VERSION" == "3.5" ]]; then conda install -c bp-kelley boost=1.62.0 ; fi
 # get swig 3?
 - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then conda install -q -c https://conda.anaconda.org/anaconda swig=3.0.8 ; fi

 # install eigen from conda-forge
 - conda install -q -c conda-forge eigen


before_script:
 # RDKit
 - export RDBASE=`pwd`
 - echo $RDBASE
 - export PYTHONPATH=${RDBASE}
 - export LD_LIBRARY_PATH=${RDBASE}/lib

 - export PYTHON=`which python`
 - echo $PYTHON
 - export PY_PREFIX=`$PYTHON -c "import sys; print(sys.prefix)"`
 - echo $PY_PREFIX
 - export PY_SP_DIR=$PY_PREFIX/lib/python$CONDA_PYTHON_VERSION/site-packages
 - echo $PY_SP_DIR


script:
 - cd $RDBASE
 - mkdir build
 - cd build
 - cmake -D Python_ADDITIONAL_VERSIONS=$CONDA_PYTHON_VERSION -D PYTHON_EXECUTABLE=$PYTHON -D PYTHON_LIBRARY=`find $PY_PREFIX -name "libpython$CONDA_PYTHON_VERSION*.so"` -D PYTHON_NUMPY_INCLUDE_PATH=$PY_SP_DIR/numpy/core/include -D BOOST_ROOT=$PY_PREFIX -D Boost_NO_SYSTEM_PATHS=ON -D RDK_BUILD_SWIG_WRAPPERS=ON -D RDK_BUILD_AVALON_SUPPORT=ON -D RDK_BUILD_INCHI_SUPPORT=ON -DRDK_BUILD_THREADSAFE_SSS=on -DRDK_TEST_MULTITHREADED=on ..
 - cat CMakeCache.txt # useful for debugging/troubleshooting

 - make -j2
 - make install
 - ls "$PREFIX/lib"
 - ls "$PY_PREFIX/lib"
 - export LD_LIBRARY_PATH="$PY_PREFIX/lib:$PREFIX/lib;$SRC_DIR/lib;$LD_LIBRARY_PATH"
 - export DYLD_FALLBACK_LIBRARY_PATH="$PY_PREFIX/lib:$PREFIX/lib:$SRC_DIR/lib:$DYLD_LIBRARY_PATH"

 - ctest -j2 --output-on-failure
